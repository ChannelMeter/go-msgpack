MsgPack library for Go.

Implements: 
  http://wiki.msgpack.org/display/MSGPACK/Format+specification

To install:
  go get github.com/ugorji/go-msgpack

It provides features similar to encoding packages 
in the standard library (ie json, xml, gob, etc).

Supports:
  - Standard Marshal/Unmarshal interface.
  - Standard field renaming via tags
  - Encoding from any value 
    (struct, slice, map, primitives, pointers, interface{}, etc)
  - Decoding into a pointer to any non-nil value 
    (struct, slice, map, int, float32, bool, string, etc)
  - Decoding into a nil interface{} 
  - Handles time.Time transparently (user-defined resolution)

Usage:

  dec = msgpack.NewDecoder(r, nil)
  err = dec.Decode(&v) 
  
  enc = msgpack.NewEncoder(w, nil)
  err = enc.Encode(v) 
  
  //methods below are convenience methods over functions above.
  data, err = msgpack.Marshal(v, nil) 
  err = msgpack.Unmarshal(data, &v, nil)

  //RPC Communication
  conn, err = net.Dial("tcp", "localhost:5555")
  rpcCodec := msgpack.NewRPCCodec(conn)
  client := rpc.NewClientWithCodec(rpcCodec)
  ...

JSON Compatibility:

The Decoder takes options that can allow you specify that 
your resulting map should be JSON compatible. For example,
you can specify that all []byte be converted to strings and
all maps be of type map[string]interface{}.

